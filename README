# 🌱 SpringBoot Skill Builder

**Proyecto de aprendizaje / API de práctica con Spring Boot**

---

## 📋 Descripción

Este proyecto es una API desarrollada con **Spring Boot** como parte de mi proceso continuo de formación en desarrollo backend con Java.  
El objetivo principal es **consolidar habilidades** en el ecosistema Spring, aplicando conceptos de arquitectura por capas, controladores REST, persistencia con JPA, validaciones y buenas prácticas.

Cada módulo o funcionalidad que agrego refleja nuevos conocimientos adquiridos durante mi proceso de aprendizaje.

---

## 🧩 Tecnologías utilizadas

- **Java 17+**  
- **Spring Boot**  
  - Spring Web (controladores REST)  
  - Spring Data JPA (persistencia)  
  - Spring Validation  
  - (Futuro) Spring Security  
- **Base de datos:** H2 / MySQL / PostgreSQL  
- **Maven** como herramienta de gestión de dependencias  
- **JUnit / Mockito** (pruebas futuras)

---

## 🏗️ Estructura del proyecto

springboot-skill-builder/
├── src/
│ ├── main/
│ │ ├── java/com/csamuelrod/...
│ │ │ ├── controller/
│ │ │ ├── service/
│ │ │ ├── model/
│ │ │ └── repository/
│ │ └── resources/
│ │ ├── application.properties
│ │ └── data.sql / schema.sql (opcional)
│ └── test/
│ └── java/...
├── pom.xml
└── .gitignore


---

## 🚀 Cómo ejecutar el proyecto localmente

1. **Clonar el repositorio:**
   git clone https://github.com/CSamuelRod/springboot-skill-builder.git
   cd springboot-skill-builder


Configurar la base de datos en src/main/resources/application.properties (o usar la base en memoria H2).

Ejecutar la aplicación:

./mvnw spring-boot:run


O si tienes Maven instalado globalmente:

mvn spring-boot:run


La API estará disponible en:

http://localhost:8080/

🧪 Endpoints (ejemplo)

Sustituye o amplía según los endpoints reales que vayas implementando.

Método	Endpoint	Descripción
GET	/api/items	Obtener todos los ítems
GET	/api/items/{id}	Obtener un ítem por su ID
POST	/api/items	Crear un nuevo ítem
PUT	/api/items/{id}	Actualizar un ítem existente
DELETE	/api/items/{id}	Eliminar un ítem
✅ Buenas prácticas implementadas

Validaciones con anotaciones (@Valid, @NotNull, etc.)
Controladores estructurados (@RestController)
Inyección de dependencias mediante @Service y @Repository
Uso de DTOs para desacoplar las entidades de la capa de presentación
Manejo centralizado de errores con @ControllerAdvice
Configuración y organización modular

🗺️ Roadmap / próximas mejoras

 Implementar autenticación con Spring Security

 Desplegar el proyecto en la nube (Render, Railway, o AWS)

 Añadir CI/CD con GitHub Actions

 Mejorar la estructura del README con ejemplos y capturas

💼 Propósito del repositorio

Este proyecto refleja mi compromiso con el aprendizaje continuo y la mejora constante en el desarrollo backend.
Lo utilizo como laboratorio personal para practicar nuevas tecnologías y aplicar buenas prácticas de ingeniería de software.

Si te interesa compartir feedback, sugerencias o colaborar, ¡toda contribución es bienvenida! 🙌